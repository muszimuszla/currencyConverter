{"version":3,"sources":["components/ExchangeRate.js","redux/actions.js","components/TransactionsTop.js","components/TransactionsAdd.js","components/TransactionsSum.js","components/TransactionsAll.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["ExchangeRate","handleChange","e","target","value","props","changeExchangeRate","Fragment","className","type","this","rate","name","onChange","min","step","Component","mapDispatchToProprs","connect","state","TransactionsTop","topTransaction","title","euro","transactions","forEach","transaction","parseInt","id","toFixed","calculatePLN","TransactionsAdd","setState","handleSubmission","preventDefault","addTransaction","addToSum","document","getElementById","reset","onSubmit","placeholder","required","TransactionsSum","sum","TransactionsAll","transactionsItems","map","index","key","onClick","removeTransaction","App","Boolean","window","location","hostname","match","initialState","rootReducer","action","filter","createStore","undefined","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92e23fce.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { changeExchangeRate } from \"../redux/actions\";\r\n\r\nexport class ExchangeRate extends Component {\r\n  handleChange = (e) => {\r\n    if (e.target.value >= 0) {\r\n      this.props.changeExchangeRate(e.target.value);\r\n    } else {\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"exchange-rate\">\r\n          <p>1 EUR = </p>\r\n          <input\r\n            type=\"number\"\r\n            value={this.props.rate}\r\n            name=\"rate\"\r\n            onChange={this.handleChange}\r\n            min=\"0\"\r\n            step=\"0.01\"\r\n          />\r\n          <p>PLN </p>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    rate: state.rate,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProprs = {\r\n  changeExchangeRate: changeExchangeRate,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProprs)(ExchangeRate);\r\n","export const ADD_TRANSACTION = \"ADD_TRANSACTION\";\r\nexport const REMOVE_TRANSACTION = \"REMOVE_TRANSACTION\";\r\nexport const CHANGE_EXCHANGE_RATE = \"CHANGE_EXCHANGE_RATE\";\r\nexport const ADD_TO_SUM = \"ADD_TO_SUM\";\r\n\r\nexport function addTransaction(title, euro) {\r\n  return { type: ADD_TRANSACTION, title, euro };\r\n}\r\n\r\nexport function removeTransaction(id, euro) {\r\n  return { type: REMOVE_TRANSACTION, id, euro };\r\n}\r\n\r\nexport function changeExchangeRate(rate) {\r\n  return { type: CHANGE_EXCHANGE_RATE, rate };\r\n}\r\n\r\nexport function addToSum(euro) {\r\n  return { type: ADD_TO_SUM, euro };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport class TransactionsTop extends Component {\r\n  render() {\r\n    function calculatePLN(euro, rate) {\r\n      return (euro * rate).toFixed(2);\r\n    }\r\n\r\n    function calculateEURO(euro) {\r\n      return (euro * 1).toFixed(2);\r\n    }\r\n\r\n    var topTransaction = { title: \"\", euro: 0 };\r\n    this.props.transactions.forEach((transaction) => {\r\n      if (parseInt(transaction.euro, 10) > topTransaction.euro) {\r\n        topTransaction.title = transaction.title;\r\n        topTransaction.euro = transaction.euro;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"top-transaction\">\r\n          <p id=\"top\">TOP</p>\r\n          <p> {topTransaction.title} </p>\r\n          <div className=\"top-transaction__value\">\r\n            <p> {calculateEURO(topTransaction.euro)} EUR </p>\r\n            <p>{calculatePLN(topTransaction.euro, this.props.rate)} PLN</p>{\" \"}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    transactions: state.transactions,\r\n    rate: state.rate,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(TransactionsTop);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTransaction, addToSum } from \"../redux/actions\";\r\n\r\nexport class TransactionsAdd extends Component {\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleSubmission = (e) => {\r\n    e.preventDefault();\r\n\r\n    let { title, euro } = this.state;\r\n    this.props.addTransaction(title, euro);\r\n    this.props.addToSum(euro * 1);\r\n\r\n    document.getElementById(\"form\").reset();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <form id=\"form\" onSubmit={this.handleSubmission}>\r\n          <div className=\"add-form\">\r\n            <input\r\n              id=\"title\"\r\n              placeholder=\"TRANSACTION TITLE\"\r\n              type=\"text\"\r\n              name=\"title\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n            <input\r\n              id=\"EUR\"\r\n              placeholder=\"EUR\"\r\n              type=\"number\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n              name=\"euro\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n            <button type=\"submit\">\r\n              <p>ADD</p>\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, {\r\n  addTransaction: addTransaction,\r\n  addToSum: addToSum,\r\n})(TransactionsAdd);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport class TransactionsSum extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"sum\">\r\n          <p id=\"EUR\">{this.props.sum.toFixed(2)}€</p>\r\n          <p id=\"PLN\">{(this.props.sum * this.props.rate).toFixed(2)}zł</p>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    rate: state.rate,\r\n    sum: state.sum,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(TransactionsSum);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeTransaction } from \"../redux/actions\";\r\nimport TransactionsAdd from \"./TransactionsAdd\";\r\nimport TransactionsSum from \"./TransactionsSum\";\r\n\r\nexport class TransactionsAll extends Component {\r\n  render() {\r\n    function calculatePLN(euro, rate) {\r\n      return (euro * rate).toFixed(2);\r\n    }\r\n\r\n    function calculateEURO(euro) {\r\n      return (euro * 1).toFixed(2);\r\n    }\r\n\r\n    const transactionsItems = this.props.transactions.map(\r\n      (transaction, index) => (\r\n        <div key={index} className=\"transactions__item\">\r\n          <p id=\"title\">{transaction.title}</p>\r\n          <p id=\"EUR\">{calculateEURO(transaction.euro)}€</p>\r\n          <p id=\"PLN\">{calculatePLN(transaction.euro, this.props.rate)}zł</p>\r\n          <button\r\n            className=\"delete\"\r\n            onClick={() =>\r\n              this.props.removeTransaction(index, transaction.euro)\r\n            }\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n      )\r\n    );\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"transactions\">\r\n          <TransactionsAdd />\r\n          <div className=\"transactions__items\">{transactionsItems}</div>\r\n          <TransactionsSum />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    transactions: state.transactions,\r\n    rate: state.rate,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProprs = {\r\n  removeTransaction: removeTransaction,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProprs)(TransactionsAll);\r\n","import React from \"react\";\r\nimport ExchangeRate from \"./components/ExchangeRate\";\r\nimport TransactionTop from \"./components/TransactionsTop\";\r\nimport TransactionsAll from \"./components/TransactionsAll\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"mobile\">\r\n        <h2> That page isn't ready for mobile yet :) </h2>\r\n      </div>\r\n      <div className=\"main-container\">\r\n        <div className=\"main-container__left\">\r\n          <ExchangeRate />\r\n          <TransactionTop />\r\n        </div>\r\n        <div className=\"main-container__right\">\r\n          <TransactionsAll />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n  ADD_TRANSACTION,\r\n  REMOVE_TRANSACTION,\r\n  CHANGE_EXCHANGE_RATE,\r\n  ADD_TO_SUM,\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n  transactions: [\r\n    { title: \"Transaction no. 2514526586\", euro: 35.2 },\r\n    { title: \"Transaction no. 4875148695\", euro: 44.5 },\r\n    { title: \"Transaction no. 5248625931\", euro: 120.25 },\r\n    { title: \"Transaction no. 9623584158\", euro: 50 },\r\n    { title: \"Transaction no. 3675481259\", euro: 150 },\r\n    { title: \"Transaction no. 9624851593\", euro: 26 },\r\n    { title: \"Transaction no. 5481726983\", euro: 185 },\r\n  ],\r\n  rate: 4.4,\r\n  sum: 610.95,\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TRANSACTION:\r\n      return {\r\n        ...state,\r\n        transactions: [\r\n          ...state.transactions,\r\n          {\r\n            title: action.title,\r\n            euro: action.euro,\r\n          },\r\n        ],\r\n      };\r\n    case REMOVE_TRANSACTION:\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.filter(\r\n          (transaction, index) => index !== action.id\r\n        ),\r\n        sum: state.sum - action.euro,\r\n      };\r\n    case CHANGE_EXCHANGE_RATE:\r\n      return {\r\n        ...state,\r\n        rate: action.rate,\r\n      };\r\n    case ADD_TO_SUM:\r\n      return {\r\n        ...state,\r\n        sum: state.sum + action.euro,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(\r\n  rootReducer,\r\n  undefined,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/styles.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}